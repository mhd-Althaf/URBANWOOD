<%- include("../../views/partials/admin/header") %>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f500;
        }

        .content-main {
            width: 100%;
            padding: 2rem;
        }

        .content-header {
            max-width: 1200px;
            margin: 0 auto 2rem auto;
        }

        .content-title {
            color: #15803d;
            font-size: 1.8rem;
            font-weight: 600;
            text-align: center;
            margin-bottom: 1rem;
        }

        .card {
            background: rgba(255, 255, 255, 0.085);
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        .form-select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            background-color: white;
        }

        .error-message {
            color: #dc2626;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }

        /* Image section styles */
        .image-section {
            margin-top: 2rem;
        }

        .image-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .image-container {
            position: relative;
            aspect-ratio: 1;
        }

        .product-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 4px;
        }

        .delete-image {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            background: rgba(220, 38, 38, 0.9);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .delete-image:hover {
            background: #dc2626;
        }

        /* Cropper modal styles */
        .cropper-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.85);
            z-index: 9999;
            align-items: center;
            justify-content: center;
        }

        .cropper-modal-content {
            background: white;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 800px;
        }

        .cropper-wrapper {
            height: 60vh;
            max-height: 600px;
            overflow: hidden;
        }

        .cropper-buttons {
            margin-top: 20px;
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

        /* Submit button styles */
        #updateBtn {
            width: 100%;
            padding: 1rem;
            background-color: #15803d;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            margin-top: 2rem;
            transition: background-color 0.3s;
        }

        #updateBtn:hover {
            background-color: #166534;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }

            .content-main {
                padding: 1rem;
            }
        }
    </style>
    </head>

    <body>
        <section class="content-main">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>

            <div class="card">
                <form id="productForm" method="post" action="/admin/editProduct/<%= product._id %>"
                    enctype="multipart/form-data">
                    <div class="form-grid">
                        <div class="form-group">
                            <label class="form-label" for="product_name">Product Name</label>
                            <input type="text" id="product_name" name="productName" class="form-control"
                                value="<%= product.productName %>">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea name="descriptionData" class="form-control"
                                rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Regular Price</label>
                            <input type="text" name="regularPrice" class="form-control"
                                value="<%= product.regularPrice %>">
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Sale Price</label>
                            <input type="text" name="salePrice" class="form-control" value="<%= product.salePrice %>">
                            <div id="salePrice-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Quantity</label>
                            <input type="text" name="quantity" class="form-control" value="<%= product.quantity %>">
                            <div id="quantity-error" class="error-message"></div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Category</label>
                            <select name="category" class="form-select">
                                <% for (let i=0; i < category.length; i++) { %>
                                    <option value="<%= category[i].name %>" <%=product.category===category[i].name
                                        ? 'selected' : '' %>>
                                        <%= category[i].name %>
                                    </option>
                                    <% } %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>
                    </div>

                    <div class="image-section">
                        <h3 class="form-label">Product Images</h3>
                        <div class="image-grid">
                            <% product.productImages.forEach((image, index)=> { %>
                                <div class="image-container">
                                    <img src="/uploads/re-image/<%= image %>" class="product-image" alt="Product Image">
                                    <button type="button" class="delete-image"
                                        onclick="deleteSingleImage('<%= image %>', '<%= product._id %>')">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <% }) %>
                        </div>

                        <!-- Add 4 file inputs for images -->
                        <div class="form-group" style="margin-top: 1rem;">
                            <input type="file" name="images" id="input1" class="form-control" accept="image/*"
                                onchange="handleFileSelect(event, 1)">
                            <input type="file" name="images" id="input2" class="form-control" accept="image/*"
                                onchange="handleFileSelect(event, 2)" style="margin-top: 10px;">
                            <input type="file" name="images" id="input3" class="form-control" accept="image/*"
                                onchange="handleFileSelect(event, 3)" style="margin-top: 10px;">
                            <input type="file" name="images" id="input4" class="form-control" accept="image/*"
                                onchange="handleFileSelect(event, 4)" style="margin-top: 10px;">
                            <div id="images-error" class="error-message"></div>
                        </div>

                        
                    </div>
                    <button type="button" id="updateBtn" onclick="validateAndSubmit()">Update Product</button>
                </form>

                
            </div>

            <!-- Cropper Modal -->
            <div id="cropperModal" class="cropper-modal">
                <div class="cropper-modal-content">
                    <div class="cropper-wrapper">
                        <img id="cropperImage" src="">
                    </div>
                    <div class="cropper-buttons">
                        <button id="cancelCrop" class="btn btn-secondary">Cancel</button>
                        <button id="saveCrop" class="btn btn-primary">Save</button>
                    </div>
                </div>
            </div>
        </section>

        <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
        <script>
            // Global variables
            let cropper = null;
            let activeFileInput = null;
            let currentIndex = null;

            // Handle file selection
            function handleFileSelect(event, inputNumber) {
                const input = event.target;
                const file = input.files[0];

                if (file) {
                    // Validate file type
                    if (!file.type.startsWith('image/')) {
                        displayErrorMessage('images-error', 'Please select a valid image file.');
                        input.value = '';
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        openCropperModal(e.target.result, input, inputNumber);
                    };
                    reader.readAsDataURL(file);
                }
            }

            // Open cropper modal
            function openCropperModal(imageUrl, input, inputNumber) {
                const modal = document.getElementById('cropperModal');
                const cropperImage = document.getElementById('cropperImage');

                activeFileInput = input;
                currentIndex = inputNumber;

                // Destroy existing cropper if any
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }

                // Reset the image source
                cropperImage.src = '';
                cropperImage.src = imageUrl;
                modal.style.display = 'flex';

                // Initialize cropper after image is loaded
                cropperImage.onload = function() {
                    cropper = new Cropper(cropperImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        guides: true,
                        background: false,
                        autoCropArea: 1,
                        zoomable: true,
                    });
                };
            }

            
            const saveCropButton = document.getElementById('saveCrop');
            const cancelCropButton = document.getElementById('cancelCrop');

            saveCropButton.addEventListener('click', function() {
                if (cropper && activeFileInput) {
                    const croppedCanvas = cropper.getCroppedCanvas();
                    
                    croppedCanvas.toBlob(blob => {
                        const timestamp = new Date().getTime();
                        const fileName = `cropped-img-${timestamp}.jpeg`;
                        const imgFile = new File([blob], fileName, { type: 'image/jpeg' });

                        const fileList = new DataTransfer();
                        fileList.items.add(imgFile);
                        activeFileInput.files = fileList.files;

                        if (currentIndex < 4) {
                            const nextInput = document.getElementById(`input${currentIndex + 1}`);
                            nextInput.disabled = false;
                        }

                        document.getElementById('cropperModal').style.display = 'none';
                        cropper.destroy();
                        cropper = null;
                    }, 'image/jpeg');
                }
            });

            cancelCropButton.addEventListener('click', function() {
                document.getElementById('cropperModal').style.display = 'none';
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            });

            function validateAndSubmit() {
                if (validateForm()) {
                    document.getElementById('productForm').submit();
                }
            }

            // Validate form
            function validateForm() {
                let isValid = true;
                clearErrorMessages();

                const productName = document.getElementById('product_name').value;
                const description = document.getElementsByName('descriptionData')[0].value;
                const regularPrice = document.getElementsByName('regularPrice')[0].value;
                const salePrice = document.getElementsByName('salePrice')[0].value;
                const quantity = document.getElementsByName('quantity')[0].value;
                const existingImages = document.querySelectorAll('.image-container').length;
                const newImages = Array.from(document.querySelectorAll('input[type="file"]'))
                    .filter(input => input.files.length > 0).length;

                // Product name validation
                if (!productName.trim()) {
                    displayErrorMessage('productName-error', 'Please enter a product name.');
                    isValid = false;
                }

                // Description validation
                if (!description.trim()) {
                    displayErrorMessage('description-error', 'Please enter a product description.');
                    isValid = false;
                }

                // Quantity validation
                if (!quantity.trim() || isNaN(quantity) || parseInt(quantity) < 0) {
                    displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                    isValid = false;
                }

                // Regular price validation
                if (!regularPrice.trim() || isNaN(regularPrice) || parseFloat(regularPrice) < 0) {
                    displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
                    isValid = false;
                }

                // Sale price validation
                if (salePrice.trim() && (isNaN(salePrice) || parseFloat(salePrice) < 0)) {
                    displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
                    isValid = false;
                }

                // Image validation
                if (existingImages + newImages === 0) {
                    displayErrorMessage('images-error', 'Please select at least one image.');
                    isValid = false;
                }

                return isValid;
            }

            // Display error message
            function displayErrorMessage(elementId, message) {
                const errorElement = document.getElementById(elementId);
                errorElement.textContent = message;
                errorElement.style.display = 'block';
            }

            // Clear error messages
            function clearErrorMessages() {
                const errorElements = document.getElementsByClassName('error-message');
                Array.from(errorElements).forEach(element => {
                    element.textContent = '';
                    element.style.display = 'none';
                });
            }

            // Delete single image
            function deleteSingleImage(imageId, productId) {
                fetch('/admin/deleteImage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        imageNameToServer: imageId,
                        productIdToServer: productId
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === true) {
                            window.location.reload();
                        }
                    })
                    .catch(error => console.error('Error:', error));
            }

            
            document.addEventListener('DOMContentLoaded', function() {
                
                const existingImages = document.querySelectorAll('.image-container').length;
                
               
                for(let i = 1; i <= 4-existingImages; i++) {
                    document.getElementById(`input${i}`).disabled = false;
                }
            });
        </script>
    </body>