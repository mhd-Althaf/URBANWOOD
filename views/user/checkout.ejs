<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>URBANWOOD- Checkout</title>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <!-- Include your CSS and other head elements -->

    <style>
        /* Add your custom styles here */
        .checkout-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        .checkout-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
        }

        .main-content {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .product-list,
        .address-section,
        .order-summary {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        }

        .product-item {
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 1rem;
            padding: 1rem;
            border-bottom: 1px solid #eee;
        }

        .product-item:last-child {
            border-bottom: none;
        }

        .product-image {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
        }

        .product-details {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .order-summary {
            position: sticky;
            top: 2rem;
            height: fit-content;
        }

        .payment-methods {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin: 1.5rem 0;
        }

        .payment-option {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 0.8rem;
            border: 1px solid #eee;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.2s;
        }

        .payment-option:hover {
            background: #f8f9fa;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            padding: 0.8rem 0;
            border-bottom: 1px solid #eee;
        }

        .grand-total {
            font-size: 1.2rem;
            font-weight: 600;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 2px solid #eee;
        }

        .place-order-btn {
            width: 100%;
            padding: 1rem;
            background: #2ecc71;
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.2s;
        }

        .place-order-btn:hover {
            background: #27ae60;
        }

        @media (max-width: 768px) {
            .checkout-grid {
                grid-template-columns: 1fr;
            }

            .order-summary {
                position: static;
            }
        }
    </style>
</head>

<body>
    <div class="checkout-container">
        <h1>Checkout</h1>

        <div class="checkout-grid">
            <!-- Left Column -->
            <div class="main-content">
                <!-- Products List -->
                <div class="product-list">
                    <h2>Your Items</h2>
                    <% cartItems.forEach(item=> { %>
                        <div class="product-item">
                            <img src="/uploads/product-images/<%= item.product.productImages[0] %>"
                                alt="<%= item.product.productName %>" class="product-image">
                            <div class="product-details">
                                <div class="product-name">
                                    <%= item.product.productName %>
                                </div>
                                <div class="product-quantity">Quantity: <%= item.quantity %>
                                </div>
                                <div class="product-price">â‚¹<%= item.total.toLocaleString() %>
                                </div>
                            </div>
                        </div>
                        <% }) %>
                </div>

                <!-- Address Section -->
                <div class="address-section">

                    <!-- Address Selection Cards -->
                    <div class="address-cards-container">
                        <% if (locals.userAddress && userAddress.length> 0) { %>
                            
                            <div class="address-cards-grid">
                                <% userAddress[0]?.address?.map(address=>address)?.forEach((address, index) => { %>
                                    <div class="address-card" data-address-id="<%= address._id %>">
                                        <div class="address-card-header">
                                            <div class="radio-container">
                                                <input type="radio" name="selectedAddress"
                                                    id="address<%= address._id %>" value="<%= address._id %>"
                                                    <%=index===0 ? 'checked' : '' %>
                                                class="address-radio"
                                                >
                                                <label for="address<%= address._id %>" class="address-type">
                                                    <%= address.addressType.toUpperCase() %>
                                                </label>
                                            </div>
                                        </div>
                                        <div class="address-card-body">
                                            <p class="recipient-name">
                                                <%= address.name %>
                                            </p>
                                            <div class="address-details">
                                                <p>
                                                    <%= address.city %>
                                                </p>
                                                <p>
                                                    <%= address.landMark %>
                                                </p>
                                                <p>
                                                    <%= address.state %> - <%= address.pincode %>
                                                </p>
                                            </div>
                                            <div class="contact-info">
                                                <p><i class="fas fa-phone"></i>
                                                    <%= address.phone %>
                                                </p>
                                                <% if (address.altPhone) { %>
                                                    <p><i class="fas fa-phone"></i>
                                                        <%= address.altPhone %>
                                                    </p>
                                                    <% } %>
                                            </div>
                                            <div class="card-actions">
                                                <!-- <button class="edit-btn" onclick="editAddress('<%= address._id %>')">Edit</button> -->
                                                <!-- <button class="delete-btn" onclick="deleteAddress('<%= address._id %>')">Delete</button> -->
                                            </div>
                                        </div>
                                    </div>
                                    <% }); %>
                            </div>
                            <% } else { %>
                                <div class="no-address">
                                    <p>No addresses found. Please add a new address.</p>
                                    <button class="add-address-btn" onclick="window.location.href='/add-address'">Add
                                        New Address</button>
                                </div>
                                <% } %>
                    </div>

                    <style>
                        .address-cards-container {
                            padding: 20px;
                            max-width: 1200px;
                            margin: 0 auto;
                        }

                        .address-cards-grid {
                            display: grid;
                            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                            gap: 20px;
                        }

                        .address-card {
                            background: white;
                            border-radius: 8px;
                            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                            transition: transform 0.2s, box-shadow 0.2s;
                            overflow: hidden;
                            border: 1px solid #e0e0e0;
                        }

                        .address-card:hover {
                            transform: translateY(-2px);
                            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
                        }

                        .address-card-header {
                            padding: 15px;
                            background: #f8f9fa;
                            border-bottom: 1px solid #e0e0e0;
                        }

                        .radio-container {
                            display: flex;
                            align-items: center;
                            gap: 10px;
                        }

                        .address-radio {
                            cursor: pointer;
                            width: 18px;
                            height: 18px;
                        }

                        .address-type {
                            font-weight: 600;
                            color: #2c3e50;
                            margin: 0;
                        }

                        .address-card-body {
                            padding: 15px;
                        }

                        .recipient-name {
                            font-weight: 600;
                            font-size: 1.1em;
                            margin-bottom: 10px;
                            color: #2c3e50;
                        }

                        .address-details {
                            margin-bottom: 15px;
                        }

                        .address-details p {
                            margin: 5px 0;
                            color: #4a5568;
                        }

                        .contact-info {
                            margin-bottom: 15px;
                            color: #4a5568;
                        }

                        .contact-info p {
                            display: flex;
                            align-items: center;
                            gap: 8px;
                            margin: 5px 0;
                        }

                        .card-actions {
                            display: flex;
                            gap: 10px;
                            margin-top: 15px;
                        }

                        .edit-btn,
                        .delete-btn {
                            padding: 8px 16px;
                            border-radius: 4px;
                            border: none;
                            cursor: pointer;
                            font-weight: 500;
                            transition: background-color 0.2s;
                        }

                        .edit-btn {
                            background-color: #3498db;
                            color: white;
                        }

                        .edit-btn:hover {
                            background-color: #2980b9;
                        }

                        .delete-btn {
                            background-color: #e74c3c;
                            color: white;
                        }

                        .delete-btn:hover {
                            background-color: #c0392b;
                        }

                        .no-address {
                            text-align: center;
                            padding: 40px;
                            background: #f8f9fa;
                            border-radius: 8px;
                        }

                        .add-address-btn {
                            padding: 10px 20px;
                            background-color: #2ecc71;
                            color: white;
                            border: none;
                            border-radius: 4px;
                            cursor: pointer;
                            font-weight: 500;
                            margin-top: 15px;
                        }

                        .add-address-btn:hover {
                            background-color: #27ae60;
                        }

                        @media (max-width: 768px) {
                            .address-cards-grid {
                                grid-template-columns: 1fr;
                            }
                        }
                    </style>

                </div>

                <!-- Right Column - Order Summary -->
                <div class="order-summary">
                    <h2>Order Summary</h2>
                    <div class="summary-totals">
                        <div class="summary-row">
                            <span>Subtotal</span>
                            <span>â‚¹<%= subtotal.toLocaleString() %></span>
                        </div>
                        <div class="summary-row">
                            <span>Shipping</span>
                            <span>â‚¹<%= shippingCost.toLocaleString() %></span>
                        </div>
                        <div class="summary-row grand-total">
                            <span>Total</span>
                            <span id="grandTotal">â‚¹<%= grandTotal.toLocaleString() %></span>
                        </div>
                    </div>

                    <div class="payment-methods">
                        <h3>Payment Method</h3>
                        <div class="payment-option">
                            <input type="radio" id="Razorpay" name="payment" value="Razorpay">
                            <label for="Razorpay">
                                <i class="fas fa-credit-card text-primary"></i>
                                Online Payment (via Razorpay)
                            </label>
                        </div>
                        <div class="payment-option">
                            <input type="radio" id="wallet" name="payment" value="wallet">
                            <label for="wallet">
                                <i class="fas fa-wallet text-warning"></i>
                                Wallet
                            </label>
                        </div>
                        <div class="payment-option">
                            <input type="radio" id="cod" name="payment" value="cod">
                            <label for="cod">
                                <i class="fas fa-money-bill-wave"></i>
                                Cash on Delivery
                            </label>
                        </div>
                    </div>

                    <div class="ml-65">
                        <button type="button" id="placeOrderBtn" class="place-order-btn">Place Order</button>
                    </div>

                </div>
            </div>
        </div>

        <!-- <script>
        document.getElementById('placeOrderBtn').addEventListener('click', async () => {
            // Add order placement logic here
            try {
                const response = await fetch('/place-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        // Add order details
                    })
                });

                const data = await response.json();
                if (data.success) {
                    // Handle successful order placement
                    window.location.href = '/order-success';
                }
            } catch (error) {
                console.error('Error placing order:', error);
            }
        });
    </script> -->
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                document.getElementById('placeOrderBtn').addEventListener('click', async () => {
                    try {
                        // Get selected address
                        const selectedAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
                        if (!selectedAddressRadio) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Please select a delivery address'
                            });
                            return;
                        }
 
                        // Get selected payment method
                        const selectedPaymentRadio = document.querySelector('input[name="payment"]:checked');

                        console.log(selectedPaymentRadio);
                        
                        if (!selectedPaymentRadio) {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: 'Please select a payment method'
                            });
                            return;
                        }

                        if (selectedPaymentRadio.value === "Razorpay") {   
                            try {
                                const totalElement = document.querySelector('.grand-total span:last-child');
                                if (!totalElement) {
                                    throw new Error("Unable to find total amount");
                                }

                                const totalText = totalElement.textContent.replace('â‚¹', '').trim();
                                const orderAmount = parseFloat(totalText);

                                console.log("Sending order amount:", orderAmount); // Debug log

                                if (isNaN(orderAmount) || orderAmount <= 0) {
                                    throw new Error("Invalid amount: " + totalText);
                                }

                                const response = await fetch('/createRazorpayOrder', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({ orderAmount })
                                });

                                const data = await response.json();
                                console.log("Razorpay order creation response:", data); // Debug log

                                if (!data.success) {
                                    throw new Error(data.error || "Failed to create Razorpay order");
                                }

                                const razorpayOptions = {
                                    key: data.key, // Use the key from backend response
                                    amount: data.amount,
                                    currency: data.currency,
                                    name: "Your Store Name",
                                    description: "Order Payment",
                                    order_id: data.razorpayOrderId,
                                    handler: async function(response) {
                                        try {
                                            const verifyPayload = {
                                                razorpay_order_id: response.razorpay_order_id,
                                                razorpay_payment_id: response.razorpay_payment_id,
                                                razorpay_signature: response.razorpay_signature,
                                                orderId: data.razorpayOrderId,
                                                amount: data.amount
                                            };

                                            console.log("Verification payload:", verifyPayload);

                                            const verifyRes = await fetch("/payment", {
                                                method: "POST",
                                                headers: { "Content-Type": "application/json" },
                                                body: JSON.stringify(verifyPayload)
                                            });
                                            
                                            const contentType = verifyRes.headers.get("content-type");
                                            let verifyData;
                                            
                                            if (contentType && contentType.includes("application/json")) {
                                                verifyData = await verifyRes.json();
                                                console.log('ASDFGHJHGFDFGHJHGFDSDFGH',verifyData);

                                            } else {
                                                const htmlContent = await verifyRes.text();
                                                document.body.innerHTML = htmlContent;
                                                return;
                                            }
                                        console.log(verifyData,"hgvjgjfggfgcfcghghfgfg");
                                        
                                            if (verifyData.success) {
                                                // alert("Payment Successful! Payment ID: " + verifyData.payment_id);
                                                
                                                // Show loading state
                                                const loadingAlert = Swal.fire({
                                                    title: 'Processing Order',
                                                    text: 'Please wait...',
                                                    allowOutsideClick: false,
                                                    showConfirmButton: false,
                                                    willOpen: () => {
                                                        Swal.showLoading();
                                                    }
                                                });

                                                const grandTotalElement = document.getElementById('grandTotal').innerText;
                                                const grandTotal = grandTotalElement.replace('â‚¹', '').trim();

                                                console.log(grandTotalElement, 'grandTotalElement');
                                                const orderDetails = {
                                                    addressId: selectedAddressRadio.value,
                                                    paymentMethod: selectedPaymentRadio.value,
                                                    amount: grandTotal
                                                };

                                                const orderResponse = await fetch('/place-order', {
                                                  
                                                    method: 'POST',
                                                    headers: {
                                                        'Content-Type': 'application/json'
                                                    },
                                                    body: JSON.stringify(orderDetails)
                                                });

                                                const orderData = await orderResponse.json();

                                                if (orderData.success) {
                                                    console.log("Order placed successfully")
                                                    Swal.fire({
                                                        icon: 'success',
                                                        title: 'Order Placed Successfully!',
                                                        text: 'Thank you for your order',
                                                        showConfirmButton: false,
                                                        timer: 2000
                                                    }).then(() => {
                                                        window.location.href = `/orders`;
                                                    });
                                                } else {
                                                    throw new Error(orderData.message || 'Failed to place order');
                                                }
                                            } else {
                                                alert("Payment Verification Failed!");
                                                return;
                                            }
                                        } catch (error) {
                                            console.error("Payment verification error:", error);
                                            Swal.fire({
                                                icon: 'error',
                                                title: 'Payment Failed',
                                                text: 'There was an error processing your payment.'
                                            });
                                        }
                                    },
                                    prefill: {
                                        name: data.userName || '',
                                        email: data.userEmail || '',
                                        contact: data.userContact || ''
                                    },
                                    theme: {
                                        color: "#F37254"
                                    }
                                };

                                const razorpayInstance = new Razorpay(razorpayOptions);
                                razorpayInstance.open();
                                
                            } catch (error) {
                                console.error("Error:", error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error',
                                    text: error.message || 'Failed to initialize payment'
                                });
                            }
                            return;
                        }

                        // Non-Razorpay payment flow
                        const loadingAlert = Swal.fire({
                            title: 'Processing Order',
                            text: 'Please wait...',
                            allowOutsideClick: false,
                            showConfirmButton: false,
                            willOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        const grandTotalElement = document.getElementById('grandTotal').innerText;
                        const grandTotal = grandTotalElement.replace('â‚¹', '').trim();

                        console.log(grandTotalElement, 'grandTotalElement');
                        const orderDetails = {
                            addressId: selectedAddressRadio.value,
                            paymentMethod: selectedPaymentRadio.value,
                            amount: grandTotal
                        };

                        const response = await fetch('/place-order', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(orderDetails)
                        });

                        const data = await response.json();

                        if (data.success) {
                            // alert("Order placed successfully")
                            Swal.fire({
                                icon: 'success',
                                title: 'Order Placed Successfully!',
                                text: 'Thank you for your order',
                                showConfirmButton: true,
                                timer: 2000
                            }).then(() => {
                                window.location.href = `/orders`;
                            });
                        } else {
                            throw new Error(data.message || 'Failed to place order');
                            console.log(error);
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message || 'Failed to place order. Please try again.'
                        });
                    }
                });
            });
        </script>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<!-- 
        <script>
            // Function to handle address selection
            document.querySelectorAll('.address-radio').forEach(radio => {
                radio.addEventListener('change', function () {
                    const addressId = this.value;
                    // console.log('Selected address ID:', addressId);

                    // Remove active class from all cards
                    document.querySelectorAll('.address-card').forEach(card => {
                        card.classList.remove('active-card');
                    });

                    // Add active class to selected card
                    this.closest('.address-card').classList.add('active-card');
                });
            });

            // Function to edit address
            function editAddress(addressId) {
                // console.log('Edit address:', addressId);
                // Add your edit logic here
                // Example: window.location.href = `/edit-address/${addressId}`;
            }

            // Function to delete address
            function deleteAddress(addressId) {
                if (confirm('Are you sure you want to delete this address?')) {
                    // console.log('Delete address:', addressId);
                    // Add your delete logic here
                    // Example: 
                    // fetch(`/delete-address/${addressId}`, {
                    //     method: 'DELETE'
                    // }).then(response => {
                    //     if (response.ok) {
                    //         window.location.reload();
                    //     }
                    // });
                }
            }




            function verifyPayment(order, payment, orderId) {
                $.ajax({
                    url: '/verifyPayment',
                    method: 'post',
                    data: {
                        order,
                        payment
                    }, success: (response) => {
                        if (response.status) {
                            $.ajax({
                                url: '/paymentConfirm',
                                method: 'post',
                                data: {
                                    status: "Pending",
                                    orderId
                                },
                                success: (response) => {
                                }
                            })
                            Swal.fire({
                                title: "Order success",
                                text: "order placed successfully",
                                icon: "success",
                                showCancelButton: true,
                                confirmButtonText: "view orders",
                                cancelButtonText: "continue shopping",
                                reverseButtons: true
                            }).then(function (result) {
                                if (result.value) {
                                    console.log("I am success");
                                    var orderDetailsUrl = `/orderDetails?id=${orderId}`;
                                    location.href = orderDetailsUrl;
                                } else if (result.dismiss === "cancel") {
                                    console.log("Nopppp");
                                    location.href = '/'
                                }
                            });
                        }

                    }
                })
            }

            function showCouponDetails(couponName) {
                Swal.fire({
                    title: 'Coupon Details',
                    text: `${couponName}`,
                    icon: 'info',
                    confirmButtonText: 'OK'
                }).then((result) => {
                    if (result.isConfirmed) {
                        copyToClipboard(couponName);
                    }
                });
            }

            function copyToClipboard(text) {
                var tempInput = document.createElement('input');
                document.body.appendChild(tempInput);
                tempInput.value = text;

                tempInput.select();
                document.execCommand('copy');

                document.body.removeChild(tempInput);

                Swal.fire({
                    title: 'Copied!',
                    text: 'Coupon name has been copied to the clipboard.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                });
            }

            let discount = 0;



            const applyCoupon = async (totalAmount) => {
                const couponName = document.getElementById("inputCoupon").value.trim();
                if (!couponName) {
                    Swal.fire({ icon: 'error', title: 'Error', text: 'Please enter a coupon code.' });
                    return;
                }

                try {
                    const response = await fetch('/applyCoupon', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ coupon: couponName, total: totalAmount }),
                    });

                    const data = await response.json();
                    if (data.success) {
                        Swal.fire({ icon: 'success', title: 'Success', text: `Coupon Discount ${data.offerPrice} Applied` });
                        document.getElementById("totalValue").innerText = `â‚¹${data.gt}`;
                        document.getElementById("discount").innerText = data.offerPrice;
                        document.getElementById("inputCoupon").value = "";
                        discount = data.offerPrice;
                    } else {
                        Swal.fire({ icon: 'error', title: 'Error', text: data.message });
                    }
                } catch (error) {
                    console.error('Error applying coupon:', error);
                    Swal.fire({ icon: 'error', title: 'Error', text: 'Failed to apply coupon.' });
                }
            };




            var usedCoupon = null;
            const useCoupon = async (couponName) => {
                disableOtherCoupons(couponName);
                copyToClipboard(couponName);
                document.getElementById("inputCoupon").value = couponName;
                document.getElementById('useButton_' + couponName).style.display = 'none';
                document.getElementById('cancelButton_' + couponName).style.display = 'block';
                usedCoupon = couponName;
            }

            const cancelCoupon = async (couponName) => {
                enableAllCoupons();
                document.getElementById('useButton_' + couponName).style.display = 'block';
                document.getElementById('cancelButton_' + couponName).style.display = 'none';
                usedCoupon = null;
                window.location.reload();
            }
            function disableOtherCoupons(excludeCoupon) {
                var couponButtons = document.querySelectorAll('.use-button');
                couponButtons.forEach(function (button) {
                    var couponName = button.id.replace('useButton_', '');
                    if (couponName !== excludeCoupon) {
                        button.disabled = true;
                    }
                });
            }

            function enableAllCoupons() {
                var couponButtons = document.querySelectorAll('.use-button');
                couponButtons.forEach(function (button) {
                    button.disabled = false;
                });
            }
        
        
        </script> -->

        </script>   
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</body>

</html>